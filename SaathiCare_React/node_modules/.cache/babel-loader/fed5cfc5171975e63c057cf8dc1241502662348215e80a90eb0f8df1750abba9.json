{"ast":null,"code":"var _jsxFileName = \"/Users/ritusaini/Documents/GitHub/SaathiCareApp/SaathiCare_React/src/components/MainContent/MainContent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';\nimport { FaRobot, FaUser, FaPlay, FaMicrophone, FaPaperPlane, FaHourglassHalf } from 'react-icons/fa';\nimport './MainContent.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MainContent = () => {\n  _s();\n  const [chatStarted, setChatStarted] = useState(false);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [currentTagIndex, setCurrentTagIndex] = useState(-1);\n  const [userInput, setUserInput] = useState('');\n  const [shuffledTags, setShuffledTags] = useState([]);\n  const [isListening, setIsListening] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const speechRecognition = useRef(null);\n  const inputRef = useRef(null);\n  const [inputDisabled, setInputDisabled] = useState(false);\n  const [userName, setUserName] = useState('');\n  const [userAddress, setUserAddress] = useState('');\n  const [collectingUserInfo, setCollectingUserInfo] = useState(false);\n  const [userInfoStep, setUserInfoStep] = useState('');\n  const chatAreaRef = useRef(null);\n  const initialTags = ['symptom', 'lifestyle', 'genetic'];\n  useEffect(() => {\n    if (chatStarted && !collectingUserInfo && currentTagIndex >= 0 && shuffledTags.length > currentTagIndex) {\n      handleApiCall(shuffledTags[currentTagIndex]);\n    }\n    // eslint-disable-next-line\n  }, [chatStarted, collectingUserInfo, shuffledTags, currentTagIndex]);\n  const lazyInitSpeechRecognition = useCallback(() => {\n    if (speechRecognition.current !== null) return;\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (SpeechRecognition) {\n      const recognition = new SpeechRecognition();\n      recognition.continuous = false;\n      recognition.lang = 'en-US';\n      recognition.interimResults = false;\n      recognition.onresult = event => {\n        const transcript = event.results[0][0].transcript;\n        setUserInput(transcript);\n      };\n      recognition.onend = () => {\n        setIsListening(false);\n      };\n      speechRecognition.current = recognition;\n    }\n  }, []);\n  useEffect(() => {\n    lazyInitSpeechRecognition();\n  }, [lazyInitSpeechRecognition]);\n  const toggleListening = useCallback(() => {\n    if (!isListening) {\n      var _speechRecognition$cu;\n      (_speechRecognition$cu = speechRecognition.current) === null || _speechRecognition$cu === void 0 ? void 0 : _speechRecognition$cu.start();\n    } else {\n      var _speechRecognition$cu2;\n      (_speechRecognition$cu2 = speechRecognition.current) === null || _speechRecognition$cu2 === void 0 ? void 0 : _speechRecognition$cu2.stop();\n    }\n    setIsListening(!isListening);\n    inputRef.current.focus();\n  }, [isListening]);\n  const startChat = () => {\n    setCollectingUserInfo(true);\n    setUserInfoStep('name');\n    setChatMessages([{\n      type: 'bot',\n      text: \"Type your name\"\n    }]);\n    setChatStarted(true);\n  };\n  const stateMappings = useMemo(() => ({\n    symptom: 'symptom_questions',\n    lifestyle: 'lifestyle_questions',\n    genetic: 'genetic_questions',\n    report: 'report_questions'\n  }), []);\n  const userStateMappings = {\n    symptom: 'user_symptoms',\n    lifestyle: 'user_lifestyle',\n    genetic: 'user_genetic',\n    report: 'user_report'\n  };\n  const [apiStates, setApiStates] = useState({\n    greeting_response: \"\",\n    symptom_questions: [],\n    lifestyle_questions: [],\n    genetic_questions: [],\n    report_questions: [],\n    user_symptoms: [],\n    user_lifestyle: [],\n    user_genetic: [],\n    user_report: []\n  });\n  const fetchContext = async userResponses => {\n    try {\n      setIsLoading(false);\n      setInputDisabled(true);\n      setIsListening(false);\n      const response = await fetch('http://34.29.182.251:8090/process_responses', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user_responses: userResponses\n        })\n      });\n      const data = await response.json();\n      return data.response;\n    } catch (error) {\n      return \"ERROR\";\n    }\n  };\n  const fetchClinicSuggestions = async userAddress => {\n    try {\n      const response = await fetch('http://34.29.182.251:9070/nearest_clinic', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          address: userAddress\n        })\n      });\n      const data = await response.json();\n      return data.nearest_clinic.join(\",\\n\");\n    } catch (error) {\n      return \"Error fetching clinic suggestions\";\n    }\n  };\n  const handleApiCall = useCallback(async tag => {\n    setIsLoading(true);\n    let context = '';\n    if (tag === 'report') {\n      const userResponses = {\n        lifestyle: apiStates.user_lifestyle.join(\", \"),\n        symptom: apiStates.user_symptoms.join(\", \"),\n        genetic: apiStates.user_genetic.join(\", \")\n      };\n      context = await fetchContext(userResponses);\n      let prompt = await generatePromptForTag(userName, tag, currentTagIndex, shuffledTags, apiStates, stateMappings, userStateMappings, context);\n      try {\n        const response = await fetch('http://34.29.182.251:8080/predict', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            question: prompt,\n            tag: tag,\n            context: context\n          })\n        });\n        const data = await response.json();\n        setChatMessages(chatMessages => [...chatMessages, {\n          type: 'bot',\n          text: data.response\n        }]);\n        setInputDisabled(true);\n        setIsListening(false);\n        setTimeout(async () => {\n          const clinicSuggestions = await fetchClinicSuggestions(userAddress);\n          setChatMessages(chatMessages => [...chatMessages, {\n            type: 'bot',\n            text: `You can visit any of the following clinics:\\n ${clinicSuggestions}`\n          }]);\n        }, 2000);\n      } catch (error) {\n        setChatMessages(chatMessages => [...chatMessages, {\n          type: 'bot',\n          text: 'There was an error processing your request.'\n        }]);\n        setInputDisabled(true);\n        setIsListening(false);\n        setTimeout(async () => {\n          const clinicSuggestions = await fetchClinicSuggestions(userAddress);\n          setChatMessages(chatMessages => [...chatMessages, {\n            type: 'bot',\n            text: `You can visit any of the following clinics:\\n ${clinicSuggestions}`\n          }]);\n        }, 2000);\n      }\n    } else {\n      let prompt = await generatePromptForTag(userName, tag, currentTagIndex, shuffledTags, apiStates, stateMappings, userStateMappings, context);\n      try {\n        const response = await fetch('http://34.29.182.251:8080/predict', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            question: prompt,\n            tag: tag,\n            context: context\n          })\n        });\n        const data = await response.json();\n        const botQuestion = {\n          type: 'bot',\n          text: data.response\n        };\n        setChatMessages(chatMessages => [...chatMessages, botQuestion]);\n        setApiStates(prevStates => ({\n          ...prevStates,\n          [stateMappings[tag]]: [...prevStates[stateMappings[tag]], data.response]\n        }));\n      } catch (error) {\n        setChatMessages(chatMessages => [...chatMessages, {\n          type: 'bot',\n          text: 'There was an error processing your request.'\n        }]);\n      }\n    }\n    setIsLoading(false);\n    // eslint-disable-next-line\n  }, [userName, userAddress, currentTagIndex, shuffledTags, apiStates]);\n  const handleInputChange = useCallback(event => {\n    setUserInput(event.target.value);\n  }, []);\n  const handleSendMessage = useCallback(() => {\n    if (!userInput.trim() || isLoading) return;\n    setInputDisabled(true);\n    const newUserMessage = {\n      type: 'user',\n      text: userInput\n    };\n    setChatMessages(chatMessages => [...chatMessages, newUserMessage]);\n    if (collectingUserInfo) {\n      if (userInfoStep === 'name') {\n        setUserName(userInput);\n        setUserInfoStep('address');\n        setChatMessages(messages => [...messages, {\n          type: 'bot',\n          text: \"Type your address\"\n        }]);\n        setUserInput('');\n      } else if (userInfoStep === 'address') {\n        setUserAddress(userInput);\n        setCollectingUserInfo(false);\n        const shuffled = shuffleArray([...initialTags]);\n        shuffled.push('report');\n        setShuffledTags(shuffled);\n        setChatMessages(messages => [...messages, {\n          type: 'bot',\n          text: `Hi ${userName}, I am your doctor. How can I help you today?`\n        }]);\n        setChatStarted(true);\n        setUserInput('');\n      }\n    } else {\n      if (currentTagIndex === -1) {\n        setApiStates(prevStates => ({\n          ...prevStates,\n          greeting_response: userInput\n        }));\n        setCurrentTagIndex(0);\n      } else {\n        const currentTag = shuffledTags[currentTagIndex];\n        const userStateKey = userStateMappings[currentTag];\n        setApiStates(prevStates => ({\n          ...prevStates,\n          [userStateKey]: [...prevStates[userStateKey], userInput]\n        }));\n        const nextIndex = currentTagIndex + 1;\n        if (nextIndex < shuffledTags.length) {\n          setCurrentTagIndex(nextIndex);\n        }\n      }\n    }\n    setUserInput('');\n    setInputDisabled(false);\n    inputRef.current.focus();\n    // eslint-disable-next-line\n  }, [userInput, isLoading, chatMessages, collectingUserInfo, userInfoStep, userName, currentTagIndex, shuffledTags]);\n  const shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n  useEffect(() => {\n    if (isLoading) {\n      setInputDisabled(true);\n    } else {\n      setInputDisabled(false);\n    }\n  }, [isLoading]);\n  const resetChat = useCallback(() => {\n    setChatStarted(false);\n    setChatMessages([]);\n    setCurrentTagIndex(-1);\n    setUserInput('');\n    setShuffledTags([]);\n    setIsListening(false);\n    setIsLoading(false);\n    setInputDisabled(false);\n    setCollectingUserInfo(false);\n    setUserInfoStep('');\n    setUserName('');\n    setUserAddress('');\n  }, []);\n  useEffect(() => {\n    if (chatAreaRef.current) {\n      chatAreaRef.current.scrollTop = chatAreaRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-content\",\n    children: [!chatStarted && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"start-chat-button\",\n      onClick: startChat,\n      children: [/*#__PURE__*/_jsxDEV(FaPlay, {\n        className: \"start-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 13\n      }, this), \" Start Chat\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 13\n    }, this), (chatStarted || collectingUserInfo) && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-area\",\n        ref: chatAreaRef,\n        children: chatMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chat-message ${msg.type}-message`,\n          children: [msg.type === 'user' ? /*#__PURE__*/_jsxDEV(FaUser, {\n            className: \"message-icon user-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 40\n          }, this) : /*#__PURE__*/_jsxDEV(FaRobot, {\n            className: \"message-icon bot-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 88\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: msg.text.includes('\\n') ? msg.text.split('\\n').map((line, lineIndex) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: [line, lineIndex < msg.text.split('\\n').length - 1 && /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 297,\n                columnNumber: 79\n              }, this)]\n            }, lineIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 23\n            }, this)) : msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `input-area ${inputDisabled ? 'disabled' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(FaMicrophone, {\n          className: `mic-icon ${isListening ? 'listening' : ''} ${inputDisabled ? 'disabled' : ''}`,\n          onClick: toggleListening\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: inputRef,\n          type: \"text\",\n          placeholder: \"Type your response...\",\n          className: `prompt-input ${inputDisabled ? 'disabled' : ''}`,\n          value: userInput,\n          onChange: handleInputChange,\n          onKeyPress: e => e.key === 'Enter' && handleSendMessage(),\n          disabled: inputDisabled\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `send-button ${isLoading || inputDisabled ? 'disabled' : ''}`,\n          onClick: handleSendMessage,\n          disabled: isLoading || inputDisabled,\n          children: isLoading ? /*#__PURE__*/_jsxDEV(FaHourglassHalf, {\n            className: \"hourglass\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 32\n          }, this) : /*#__PURE__*/_jsxDEV(FaPaperPlane, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 76\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true), chatStarted && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"reset-chat-button\",\n      onClick: resetChat,\n      children: \"Reset Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 281,\n    columnNumber: 9\n  }, this);\n};\n_s(MainContent, \"Rdmj+UqEU82YiwqlftaDvaIZljw=\");\n_c = MainContent;\nexport default MainContent;\nfunction generatePromptForTag(userName, tag, currentTagIndex, shuffledTags, apiStates, stateMappings, userStateMappings, fetchedContext) {\n  let prompt = \"\";\n  const greetingQuestion = `Hi ${userName}, I am your doctor. How can I help you today?`;\n  const greetingResponse = apiStates.greeting_response;\n  if (currentTagIndex === 0) {\n    prompt = `Greeting Question: ${greetingQuestion}\n              Greeting Response from Patient: ${greetingResponse}\n              I am playing a doctor in a play. Please generate one question I should ask a patient about their ${tag}.\n              Format your response strictly as follows: \n              ${tag.charAt(0).toUpperCase() + tag.slice(1)}: [A question related to the ${tag} they are having].`;\n  } else if (currentTagIndex === 1) {\n    const previousTag = shuffledTags[currentTagIndex - 1];\n    const lastQuestion = apiStates[stateMappings[previousTag]].slice(-1)[0];\n    const lastResponse = apiStates[userStateMappings[previousTag]].slice(-1)[0];\n    prompt = `Greeting Question: ${greetingQuestion}\n              Greeting Response from Patient: ${greetingResponse}\n              Previous Question: ${lastQuestion}\n              Previous Response from Patient: ${lastResponse}\n              I am playing a doctor in a play. Please generate one question based on the previous responses I should ask a patient about their ${tag}.\n              Format your response strictly as follows:\n              ${tag.charAt(0).toUpperCase() + tag.slice(1)}: [A question related to the ${tag} they are having].`;\n  } else if (currentTagIndex === 2) {\n    const previousTags = shuffledTags.slice(0, 2);\n    const previousQuestions = previousTags.map(tag => apiStates[stateMappings[tag]].slice(-1)[0]);\n    const previousResponses = previousTags.map(tag => apiStates[userStateMappings[tag]].slice(-1)[0]);\n    prompt = `Greeting Question: ${greetingQuestion}\n              Greeting Response from Patient: ${greetingResponse}\n              First Question: ${previousQuestions[0]}\n              First Response from Patient: ${previousResponses[0]}\n              Second Question: ${previousQuestions[1]}\n              Second Response from Patient: ${previousResponses[1]}\n              I am playing a doctor in a play. Please generate one question that I should ask a patient based on the previous responses, about their ${tag}.\n              Format your response strictly as follows:\n              ${tag.charAt(0).toUpperCase() + tag.slice(1)}: [A question related to the ${tag} they are having].`;\n  } else if (currentTagIndex === shuffledTags.length - 1) {\n    prompt = `Greeting Question: ${greetingQuestion}\n              Greeting Response from Patient: ${greetingResponse}\n              Patient symptoms: ${apiStates.user_symptoms.join(\", \")}.\n              Lifestyle and eating habits: ${apiStates.user_lifestyle.join(\", \")}.\n              Family history of diseases: ${apiStates.user_genetic.join(\", \")}.\n\n              Data Source for analysis:\n              ${fetchedContext}\n\n              Based on the patient's symptoms and provided context, provide a possible diagnosis, recommended treatments, and specialists to consult. \n              NOTE: 1. This will not be considered as a real treatment, don't give any note or precaution with your response.\n                    2. Make your diagnosis strictly based of of Data Source for analysis provided. \n              Format your response strictly as follows:\n              Diagnosis: [Specific diagnosis based on the symptoms].\n              Treatments:\n              - [Treatment 1]\n              - [Treatment 2]\n              - [Treatment 3]\n              ...\n              Specialists:\n              - [Specialist 1]\n              - [Specialist 2]\n              - [Specialist 3]\n              ...\n              END OF RESPONSE`;\n  }\n  return prompt;\n}\nvar _c;\n$RefreshReg$(_c, \"MainContent\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","useRef","FaRobot","FaUser","FaPlay","FaMicrophone","FaPaperPlane","FaHourglassHalf","jsxDEV","_jsxDEV","Fragment","_Fragment","MainContent","_s","chatStarted","setChatStarted","chatMessages","setChatMessages","currentTagIndex","setCurrentTagIndex","userInput","setUserInput","shuffledTags","setShuffledTags","isListening","setIsListening","isLoading","setIsLoading","speechRecognition","inputRef","inputDisabled","setInputDisabled","userName","setUserName","userAddress","setUserAddress","collectingUserInfo","setCollectingUserInfo","userInfoStep","setUserInfoStep","chatAreaRef","initialTags","length","handleApiCall","lazyInitSpeechRecognition","current","SpeechRecognition","window","webkitSpeechRecognition","recognition","continuous","lang","interimResults","onresult","event","transcript","results","onend","toggleListening","_speechRecognition$cu","start","_speechRecognition$cu2","stop","focus","startChat","type","text","stateMappings","symptom","lifestyle","genetic","report","userStateMappings","apiStates","setApiStates","greeting_response","symptom_questions","lifestyle_questions","genetic_questions","report_questions","user_symptoms","user_lifestyle","user_genetic","user_report","fetchContext","userResponses","response","fetch","method","headers","body","JSON","stringify","user_responses","data","json","error","fetchClinicSuggestions","address","nearest_clinic","join","tag","context","prompt","generatePromptForTag","question","setTimeout","clinicSuggestions","botQuestion","prevStates","handleInputChange","target","value","handleSendMessage","trim","newUserMessage","messages","shuffled","shuffleArray","push","currentTag","userStateKey","nextIndex","array","i","j","Math","floor","random","resetChat","scrollTop","scrollHeight","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","map","msg","index","includes","split","line","lineIndex","placeholder","onChange","onKeyPress","e","key","disabled","_c","fetchedContext","greetingQuestion","greetingResponse","charAt","toUpperCase","slice","previousTag","lastQuestion","lastResponse","previousTags","previousQuestions","previousResponses","$RefreshReg$"],"sources":["/Users/ritusaini/Documents/GitHub/SaathiCareApp/SaathiCare_React/src/components/MainContent/MainContent.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';\nimport { FaRobot, FaUser, FaPlay, FaMicrophone, FaPaperPlane, FaHourglassHalf } from 'react-icons/fa';\nimport './MainContent.css';\n\nconst MainContent = () => {\n  const [chatStarted, setChatStarted] = useState(false);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [currentTagIndex, setCurrentTagIndex] = useState(-1);\n  const [userInput, setUserInput] = useState('');\n  const [shuffledTags, setShuffledTags] = useState([]);\n  const [isListening, setIsListening] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const speechRecognition = useRef(null);\n  const inputRef = useRef(null);\n  const [inputDisabled, setInputDisabled] = useState(false);\n\n  const [userName, setUserName] = useState('');\n  const [userAddress, setUserAddress] = useState('');\n  const [collectingUserInfo, setCollectingUserInfo] = useState(false);\n  const [userInfoStep, setUserInfoStep] = useState('');\n  const chatAreaRef = useRef(null);\n\n\n  const initialTags = ['symptom', 'lifestyle', 'genetic'];\n\n  useEffect(() => {\n    if (chatStarted && !collectingUserInfo && currentTagIndex >= 0 && shuffledTags.length > currentTagIndex) {\n        handleApiCall(shuffledTags[currentTagIndex]);\n    }\n    // eslint-disable-next-line\n  }, [chatStarted, collectingUserInfo, shuffledTags, currentTagIndex]);\n\n  const lazyInitSpeechRecognition = useCallback(() => {\n    if (speechRecognition.current !== null) return;\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (SpeechRecognition) {\n      const recognition = new SpeechRecognition();\n      recognition.continuous = false;\n      recognition.lang = 'en-US';\n      recognition.interimResults = false;\n      recognition.onresult = (event) => {\n        const transcript = event.results[0][0].transcript;\n        setUserInput(transcript);\n      };\n      recognition.onend = () => {\n        setIsListening(false);\n      };\n      speechRecognition.current = recognition;\n    }\n  }, []);\n\n  useEffect(() => {\n    lazyInitSpeechRecognition();\n  }, [lazyInitSpeechRecognition]);\n\n  const toggleListening = useCallback(() => {\n    if (!isListening) {\n      speechRecognition.current?.start();\n    } else {\n      speechRecognition.current?.stop();\n    }\n    setIsListening(!isListening);\n    inputRef.current.focus();\n  }, [isListening]);\n\n  const startChat = () => {\n    setCollectingUserInfo(true);\n    setUserInfoStep('name');\n    setChatMessages([{ type: 'bot', text: \"Type your name\" }]);\n    setChatStarted(true);\n  };\n\n  const stateMappings = useMemo(() => ({\n    symptom: 'symptom_questions',\n    lifestyle: 'lifestyle_questions',\n    genetic: 'genetic_questions',\n    report: 'report_questions',\n  }), []);\n\n  const userStateMappings = {\n    symptom: 'user_symptoms',\n    lifestyle: 'user_lifestyle',\n    genetic: 'user_genetic',\n    report: 'user_report',\n  };\n\n  const [apiStates, setApiStates] = useState({\n    greeting_response: \"\", \n    symptom_questions: [],\n    lifestyle_questions: [],\n    genetic_questions: [],\n    report_questions: [],\n    user_symptoms: [],\n    user_lifestyle: [],\n    user_genetic: [],\n    user_report: [],\n  });\n\n  const fetchContext = async (userResponses) => {\n    try {\n      setIsLoading(false);\n      setInputDisabled(true);\n      setIsListening(false); \n      const response = await fetch('http://34.29.182.251:8090/process_responses', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ user_responses: userResponses }),\n      });\n      const data = await response.json();\n      return data.response;\n    } catch (error) {\n      return \"ERROR\";\n    }\n  };\n\n  const fetchClinicSuggestions = async (userAddress) => {\n    try {\n      const response = await fetch('http://34.29.182.251:9070/nearest_clinic', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ address: userAddress }),\n      });\n      const data = await response.json();\n      return data.nearest_clinic.join(\",\\n\");\n    } catch (error) {\n      return \"Error fetching clinic suggestions\";\n    }\n  };\n\n  const handleApiCall = useCallback(async (tag) => {\n    setIsLoading(true);\n    let context = '';\n    if (tag === 'report') {\n      const userResponses = {\n        lifestyle: apiStates.user_lifestyle.join(\", \"),\n        symptom: apiStates.user_symptoms.join(\", \"),\n        genetic: apiStates.user_genetic.join(\", \")\n      };\n      context = await fetchContext(userResponses);\n      let prompt = await generatePromptForTag(userName, tag, currentTagIndex, shuffledTags, apiStates, stateMappings, userStateMappings, context);\n      try {\n        const response = await fetch('http://34.29.182.251:8080/predict', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ question: prompt, tag: tag, context: context}),\n        });\n        const data = await response.json();\n        setChatMessages((chatMessages) => [...chatMessages, { type: 'bot', text: data.response }]);\n        setInputDisabled(true);\n        setIsListening(false); \n        setTimeout(async () => {\n          const clinicSuggestions = await fetchClinicSuggestions(userAddress);\n          setChatMessages((chatMessages) => [...chatMessages, { type: 'bot', text: `You can visit any of the following clinics:\\n ${clinicSuggestions}` }]);\n        }, 2000);\n      } catch (error) {\n        setChatMessages((chatMessages) => [...chatMessages, { type: 'bot', text: 'There was an error processing your request.' }]);\n        setInputDisabled(true);\n        setIsListening(false);\n        setTimeout(async () => {\n          const clinicSuggestions = await fetchClinicSuggestions(userAddress);\n          setChatMessages((chatMessages) => [...chatMessages, { type: 'bot', text: `You can visit any of the following clinics:\\n ${clinicSuggestions}` }]);\n        }, 2000);\n      }\n    }\n    else{\n      let prompt = await generatePromptForTag(userName,tag, currentTagIndex, shuffledTags, apiStates, stateMappings, userStateMappings, context);\n      try {\n        const response = await fetch('http://34.29.182.251:8080/predict', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ question: prompt, tag: tag, context: context}),\n        });\n        const data = await response.json();\n        const botQuestion = { type: 'bot', text: data.response };\n        setChatMessages((chatMessages) => [...chatMessages, botQuestion]);\n        setApiStates((prevStates) => ({\n          ...prevStates,\n          [stateMappings[tag]]: [...prevStates[stateMappings[tag]], data.response],\n        }));\n      } catch (error) {\n        setChatMessages((chatMessages) => [...chatMessages, { type: 'bot', text: 'There was an error processing your request.' }]);\n      }\n    }\n    setIsLoading(false);\n    // eslint-disable-next-line\n  }, [userName,userAddress, currentTagIndex, shuffledTags, apiStates]);\n\n  const handleInputChange = useCallback((event) => {\n    setUserInput(event.target.value);\n  }, []);\n\n  const handleSendMessage = useCallback(() => {\n    if (!userInput.trim() || isLoading) return;\n    setInputDisabled(true);\n    const newUserMessage = { type: 'user', text: userInput };\n    setChatMessages(chatMessages => [...chatMessages, newUserMessage]);\n\n    if (collectingUserInfo) {\n      if (userInfoStep === 'name') {\n        setUserName(userInput);\n        setUserInfoStep('address');\n        setChatMessages(messages => [...messages, { type: 'bot', text: \"Type your address\" }]);\n        setUserInput(''); \n      } else if (userInfoStep === 'address') {\n        setUserAddress(userInput);\n        setCollectingUserInfo(false);\n        const shuffled = shuffleArray([...initialTags]);\n        shuffled.push('report');\n        setShuffledTags(shuffled);\n        setChatMessages(messages => [...messages, { type: 'bot', text: `Hi ${userName}, I am your doctor. How can I help you today?` }]);\n        setChatStarted(true);\n        setUserInput('');\n      }\n    } else {\n        if (currentTagIndex === -1) {\n            setApiStates(prevStates => ({\n              ...prevStates,\n              greeting_response: userInput,\n            }));\n            setCurrentTagIndex(0);\n          } else {\n            const currentTag = shuffledTags[currentTagIndex];\n            const userStateKey = userStateMappings[currentTag];\n            setApiStates(prevStates => ({\n              ...prevStates,\n              [userStateKey]: [...prevStates[userStateKey], userInput],\n            }));\n        \n            const nextIndex = currentTagIndex + 1;\n            if (nextIndex < shuffledTags.length) {\n              setCurrentTagIndex(nextIndex);\n            }\n          }    \n        }\n\n    setUserInput('');\n    setInputDisabled(false);\n    inputRef.current.focus();\n    // eslint-disable-next-line\n  }, [userInput, isLoading, chatMessages, collectingUserInfo, userInfoStep, userName, currentTagIndex, shuffledTags]);\n\n  const shuffleArray = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n\n  useEffect(() => {\n    if (isLoading) {\n      setInputDisabled(true); \n    } else {\n      setInputDisabled(false); \n    }\n  }, [isLoading]);\n\n  const resetChat = useCallback(() => {\n    setChatStarted(false);\n    setChatMessages([]);\n    setCurrentTagIndex(-1);\n    setUserInput('');\n    setShuffledTags([]);\n    setIsListening(false);\n    setIsLoading(false);\n    setInputDisabled(false);\n    setCollectingUserInfo(false);\n    setUserInfoStep('');\n    setUserName('');\n    setUserAddress('');\n  }, []);\n  \n  useEffect(() => {\n    if (chatAreaRef.current) {\n      chatAreaRef.current.scrollTop = chatAreaRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n  \n\n    return (\n        <div className=\"main-content\">\n            {!chatStarted && (\n            <button className=\"start-chat-button\" onClick={startChat}>\n            <FaPlay className=\"start-icon\" /> Start Chat\n            </button>\n            )}\n            {(chatStarted || collectingUserInfo) && (\n            <>\n            <div className=\"chat-area\" ref={chatAreaRef}>\n            {chatMessages.map((msg, index) => (\n              <div key={index} className={`chat-message ${msg.type}-message`}>\n                {msg.type === 'user' ? <FaUser className=\"message-icon user-icon\" /> : <FaRobot className=\"message-icon bot-icon\" />}\n                <div>\n                  {msg.text.includes('\\n') ? (\n                    msg.text.split('\\n').map((line, lineIndex) => (\n                      <React.Fragment key={lineIndex}>\n                        {line}{lineIndex < msg.text.split('\\n').length - 1 && <br />}\n                      </React.Fragment>\n                    ))\n                  ) : msg.text}\n                </div>\n              </div>\n            ))}\n            </div>\n            <div className={`input-area ${inputDisabled ? 'disabled' : ''}`}>\n                <FaMicrophone className={`mic-icon ${isListening ? 'listening' : ''} ${inputDisabled ? 'disabled' : ''}`} onClick={toggleListening} />\n                <input\n                  ref={inputRef}\n                  type=\"text\"\n                  placeholder=\"Type your response...\"\n                  className={`prompt-input ${inputDisabled ? 'disabled' : ''}`}\n                  value={userInput}\n                  onChange={handleInputChange}\n                  onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                  disabled={inputDisabled}\n                />\n                <button\n                  className={`send-button ${isLoading || inputDisabled ? 'disabled' : ''}`}\n                  onClick={handleSendMessage}\n                  disabled={isLoading || inputDisabled}\n                >\n                  {isLoading ? <FaHourglassHalf className=\"hourglass\" /> : <FaPaperPlane />}\n                </button>\n            </div>\n            </>\n            )}\n            {chatStarted && (\n                <button className=\"reset-chat-button\" onClick={resetChat}>\n                Reset Chat\n                </button>\n            )}\n        </div>\n    );\n};\n\nexport default MainContent;\n\n function generatePromptForTag(userName,tag, currentTagIndex, shuffledTags, apiStates, stateMappings, userStateMappings,fetchedContext) {\n  let prompt = \"\";\n  const greetingQuestion =  `Hi ${userName}, I am your doctor. How can I help you today?`;\n  const greetingResponse = apiStates.greeting_response;\n\n  if (currentTagIndex === 0) {\n    prompt = `Greeting Question: ${greetingQuestion}\n              Greeting Response from Patient: ${greetingResponse}\n              I am playing a doctor in a play. Please generate one question I should ask a patient about their ${tag}.\n              Format your response strictly as follows: \n              ${tag.charAt(0).toUpperCase() + tag.slice(1)}: [A question related to the ${tag} they are having].`;\n  } else if (currentTagIndex === 1) {\n    const previousTag = shuffledTags[currentTagIndex - 1];\n    const lastQuestion = apiStates[stateMappings[previousTag]].slice(-1)[0];\n    const lastResponse = apiStates[userStateMappings[previousTag]].slice(-1)[0];\n\n    prompt = `Greeting Question: ${greetingQuestion}\n              Greeting Response from Patient: ${greetingResponse}\n              Previous Question: ${lastQuestion}\n              Previous Response from Patient: ${lastResponse}\n              I am playing a doctor in a play. Please generate one question based on the previous responses I should ask a patient about their ${tag}.\n              Format your response strictly as follows:\n              ${tag.charAt(0).toUpperCase() + tag.slice(1)}: [A question related to the ${tag} they are having].`;\n  } else if (currentTagIndex === 2) {\n    const previousTags = shuffledTags.slice(0, 2);\n    const previousQuestions = previousTags.map(tag => apiStates[stateMappings[tag]].slice(-1)[0]);\n    const previousResponses = previousTags.map(tag => apiStates[userStateMappings[tag]].slice(-1)[0]);\n\n    prompt = `Greeting Question: ${greetingQuestion}\n              Greeting Response from Patient: ${greetingResponse}\n              First Question: ${previousQuestions[0]}\n              First Response from Patient: ${previousResponses[0]}\n              Second Question: ${previousQuestions[1]}\n              Second Response from Patient: ${previousResponses[1]}\n              I am playing a doctor in a play. Please generate one question that I should ask a patient based on the previous responses, about their ${tag}.\n              Format your response strictly as follows:\n              ${tag.charAt(0).toUpperCase() + tag.slice(1)}: [A question related to the ${tag} they are having].`;\n  } else if (currentTagIndex === shuffledTags.length - 1) {\n    prompt = `Greeting Question: ${greetingQuestion}\n              Greeting Response from Patient: ${greetingResponse}\n              Patient symptoms: ${apiStates.user_symptoms.join(\", \")}.\n              Lifestyle and eating habits: ${apiStates.user_lifestyle.join(\", \")}.\n              Family history of diseases: ${apiStates.user_genetic.join(\", \")}.\n\n              Data Source for analysis:\n              ${fetchedContext}\n\n              Based on the patient's symptoms and provided context, provide a possible diagnosis, recommended treatments, and specialists to consult. \n              NOTE: 1. This will not be considered as a real treatment, don't give any note or precaution with your response.\n                    2. Make your diagnosis strictly based of of Data Source for analysis provided. \n              Format your response strictly as follows:\n              Diagnosis: [Specific diagnosis based on the symptoms].\n              Treatments:\n              - [Treatment 1]\n              - [Treatment 2]\n              - [Treatment 3]\n              ...\n              Specialists:\n              - [Specialist 1]\n              - [Specialist 2]\n              - [Specialist 3]\n              ...\n              END OF RESPONSE`;\n  }\n  return prompt;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}